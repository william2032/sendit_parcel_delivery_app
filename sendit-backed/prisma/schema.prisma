// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CUSTOMER
  DRIVER
}

enum ParcelStatus {
  PENDING
  ASSIGNED
  PICKED_UP
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  COMPLETED
  CANCELLED
}

enum WeightCategory {
  ULTRA_LIGHT
  LIGHT
  MEDIUM
  HEAVY
  EXTRA_HEAVY
  FREIGHT
}

enum TrackingEventType {
  ORDER_CREATED
  DRIVER_ASSIGNED
  PICKED_UP
  LOCATION_UPDATE
  OUT_FOR_DELIVERY
  DELIVERED
  COMPLETED
  CANCELLED
  EXCEPTION
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String
  phone        String?
  password     String
  profileImage String?
  role         UserRole @default(CUSTOMER)
  city         String?
  country      String?
  isActive     Boolean  @default(true)

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  sentParcels     Parcel[] @relation("SentParcels")
  receivedParcels Parcel[] @relation("ReceivedParcels")
  assignedParcels Parcel[] @relation("AssignedDriver")

  locationUpdates DriverLocation[]

  // Password reset
  resetTokens         PasswordResetToken[]
  resetTokenExpiresAt DateTime?

  // Email verification
  emailVerified    Boolean @default(false)
  emailVerifyToken String?

  // Phone verification
  phoneVerified Boolean @default(false)

  // OTP Sessions
  otpSessions OtpSession[]
  Parcel      Parcel[]

  @@map("users")
}

model DriverLocation {
  id        String   @id @default(cuid())
  driverId  String
  driver    User     @relation(fields: [driverId], references: [id], onDelete: Cascade)
  latitude  Float
  longitude Float
  address   String?
  timestamp DateTime @default(now())

  @@map("driver_locations")
}

model OtpSession {
  id          String   @id @default(cuid())
  phoneNumber String?
  email       String
  otp         String
  sessionId   String   @unique
  expiresAt   DateTime
  verified    Boolean  @default(false)
  type        OtpType

  // Relations
  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@map("otp_sessions")
}

model Location {
  id        String @id @default(cuid())
  name      String
  address   String
  latitude  Float
  longitude Float

  // Relations
  pickupParcels      Parcel[]        @relation("PickupLocation")
  destinationParcels Parcel[]        @relation("DestinationLocation")
  trackingEvents     TrackingEvent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("locations")
}

model Parcel {
  id             String @id @default(cuid())
  trackingNumber String @unique @default(cuid())

  // Sender Information
  senderId    String
  sender      User    @relation("SentParcels", fields: [senderId], references: [id])
  senderPhone String?

  // Receiver Information
  receiverId    String?
  receiver      User?   @relation("ReceivedParcels", fields: [receiverId], references: [id])
  receiverName  String
  receiverPhone String?
  receiverEmail String?

  // Driver Assignment
  driverId    String?
  driver      User?     @relation("AssignedDriver", fields: [driverId], references: [id])
  assignedAt  DateTime?
  pickupTime  DateTime?
  deliveredAt DateTime?
  completedAt DateTime?

  // Parcel Details
  weight         Float
  weightCategory WeightCategory
  description    String?

  // Location Details
  pickupLocationId String
  pickupLocation   Location @relation("PickupLocation", fields: [pickupLocationId], references: [id])

  destinationLocationId String
  destinationLocation   Location @relation("DestinationLocation", fields: [destinationLocationId], references: [id])

  // Status and Timing
  status                ParcelStatus @default(PENDING)
  estimatedDeliveryTime DateTime?
  actualDeliveryTime    DateTime?

  // Pricing
  quote    Float
  currency String @default("USD")

  // Soft Delete
  isActive  Boolean   @default(true)
  deletedAt DateTime?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  trackingEvents TrackingEvent[]
  notifications  Notification[]
  User           User?           @relation(fields: [userId], references: [id])
  userId         String?

  @@map("parcels")
}

model TrackingEvent {
  id       String @id @default(cuid())
  parcelId String
  parcel   Parcel @relation(fields: [parcelId], references: [id], onDelete: Cascade)

  type        TrackingEventType
  status      ParcelStatus
  description String
  notes       String?

  // Location where event occurred
  locationId String?
  location   Location? @relation(fields: [locationId], references: [id])
  automated  Boolean   @default(true)
  timestamp  DateTime  @default(now())

  // Driver who updated the status
  updatedBy String?

  createdAt DateTime @default(now())

  @@map("tracking_events")
}

model Notification {
  id       String @id @default(cuid())
  parcelId String
  parcel   Parcel @relation(fields: [parcelId], references: [id], onDelete: Cascade)

  type      NotificationType
  recipient String // email or phone number
  subject   String?
  message   String

  // Delivery status
  sent        Boolean   @default(false)
  sentAt      DateTime?
  delivered   Boolean   @default(false)
  deliveredAt DateTime?

  // Error handling
  error      String?
  retryCount Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)

  @@map("password_reset_tokens")
}

enum NotificationType {
  EMAIL
  SMS
  PUSH
}

enum OtpType {
  PHONE_VERIFICATION
  EMAIL_VERIFICATION
}

model WeightPricing {
  id        String         @id @default(cuid())
  category  WeightCategory @unique
  minWeight Float
  maxWeight Float?
  basePrice Float

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("weight_pricing")
}

model SystemSettings {
  id    String      @id @default(cuid())
  key   String      @unique
  value String
  type  SettingType @default(STRING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}
